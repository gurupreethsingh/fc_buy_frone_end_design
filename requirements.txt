User Model (User.js)
javascript
Copy code
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const userSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    phone: { type: String },
    dateOfBirth: { type: Date },
    gender: { type: String, enum: ['male', 'female', 'other'] },
    avatar: { type: String, default: 'default-avatar.png' },
    role: { type: String, enum: ['customer', 'admin', 'vendor'], default: 'customer' },
    addresses: [{
        street: { type: String },
        city: { type: String },
        state: { type: String },
        postalCode: { type: String },
        country: { type: String },
        isDefault: { type: Boolean, default: false },
    }],
    wishlist: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Product' }],
    cart: [{
        product: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
        quantity: { type: Number, default: 1 },
    }],
    orders: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Order' }],
    paymentMethods: [{
        cardType: { type: String, enum: ['visa', 'mastercard', 'paypal', 'amex'] },
        cardNumber: { type: String },
        expiryDate: { type: String },
        cardHolderName: { type: String },
        isDefault: { type: Boolean, default: false }
    }],
    notifications: [{
        message: { type: String },
        read: { type: Boolean, default: false },
        createdAt: { type: Date, default: Date.now }
    }],
    accountStatus: { type: String, enum: ['active', 'inactive', 'suspended'], default: 'active' },
    emailVerified: { type: Boolean, default: false },
    resetPasswordToken: { type: String },
    resetPasswordExpires: { type: Date },
}, { timestamps: true });

userSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

module.exports = mongoose.model('User', userSchema);
Product Model (Product.js)
javascript
Copy code
const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
    name: { type: String, required: true },
    description: { type: String, required: true },
    price: { type: Number, required: true },
    salePrice: { type: Number },
    discount: { type: Number },
    stock: { type: Number, required: true },
    sku: { type: String },
    categories: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Category' }],
    images: [{ type: String }],
    brand: { type: String },
    vendor: { type: mongoose.Schema.Types.ObjectId, ref: 'Vendor' },
    featured: { type: Boolean, default: false },
    newArrival: { type: Boolean, default: false },
    tags: [{ type: String }],
    weight: { type: Number },  // In kg
    dimensions: {
        length: { type: Number },  // In cm
        width: { type: Number },   // In cm
        height: { type: Number },  // In cm
    },
    ratings: [{
        user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
        rating: { type: Number, min: 1, max: 5 },
        comment: { type: String }
    }],
    averageRating: { type: Number, default: 0 },
    reviews: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Review' }],
    isPublished: { type: Boolean, default: true },
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now }
}, { timestamps: true });

module.exports = mongoose.model('Product', productSchema);
Category Model (Category.js)
javascript
Copy code
const mongoose = require('mongoose');

const categorySchema = new mongoose.Schema({
    name: { type: String, required: true, unique: true },
    description: { type: String },
    parentCategory: { type: mongoose.Schema.Types.ObjectId, ref: 'Category', default: null },
    image: { type: String },
    featured: { type: Boolean, default: false },
    active: { type: Boolean, default: true },
}, { timestamps: true });

module.exports = mongoose.model('Category', categorySchema);
Order Model (Order.js)
javascript
Copy code
const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    items: [{
        product: { type: mongoose.Schema.Types.ObjectId, ref: 'Product' },
        quantity: { type: Number, required: true },
        price: { type: Number, required: true },
        totalItemPrice: { type: Number, required: true },
    }],
    totalAmount: { type: Number, required: true },
    shippingAddress: {
        street: { type: String, required: true },
        city: { type: String, required: true },
        state: { type: String, required: true },
        postalCode: { type: String, required: true },
        country: { type: String, required: true },
    },
    billingAddress: {
        street: { type: String, required: true },
        city: { type: String, required: true },
        state: { type: String, required: true },
        postalCode: { type: String, required: true },
        country: { type: String, required: true },
    },
    shippingMethod: { type: String, enum: ['standard', 'express', 'same_day'], default: 'standard' },
    paymentStatus: { type: String, enum: ['pending', 'paid'], default: 'pending' },
    orderStatus: { type: String, enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'], default: 'pending' },
    paymentMethod: { type: String, enum: ['credit_card', 'paypal', 'cash_on_delivery'], required: true },
    trackingNumber: { type: String },
    placedAt: { type: Date, default: Date.now },
}, { timestamps: true });

module.exports = mongoose.model('Order', orderSchema);
Vendor Model (Vendor.js)
javascript
Copy code
const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

const vendorSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    shopName: { type: String, required: true },
    address: {
        street: { type: String },
        city: { type: String },
        state: { type: String },
        postalCode: { type: String },
        country: { type: String },
    },
    phone: { type: String },
    products: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Product' }],
    ratings: [{
        customer: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
        rating: { type: Number, min: 1, max: 5 },
        comment: { type: String }
    }],
    averageRating: { type: Number, default: 0 },
    accountStatus: { type: String, enum: ['active', 'inactive', 'suspended'], default: 'active' },
}, { timestamps: true });

vendorSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    this.password = await bcrypt.hash(this.password, 10);
    next();
});

module.exports = mongoose.model('Vendor', vendorSchema);
Cart Model (Cart.js)
javascript
Copy code
const mongoose = require('mongoose');

const cartSchema = new mongoose.Schema({
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    items: [{
        product: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
        quantity: { type: Number, default: 1 },
        price: { type: Number, required: true },
        totalItemPrice: { type: Number, required: true },
    }],
    totalPrice: { type: Number, default: 0 },
}, { timestamps: true });

module.exports = mongoose.model('Cart', cartSchema);
Wishlist Model (Wishlist.js)
javascript
Copy code
const mongoose = require('mongoose');

const wishlistSchema = new mongoose.Schema({
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    products: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Product' }],
}, { timestamps: true });

module.exports = mongoose.model('Wishlist', wishlistSchema);
Payment Model (Payment.js)
javascript
Copy code
const mongoose = require('mongoose');

const paymentSchema = new mongoose.Schema({
    order: { type: mongoose.Schema.Types.ObjectId, ref: 'Order', required: true },
    paymentMethod: { type: String, enum: ['credit_card', 'debit_card', 'paypal', 'cash_on_delivery'], required: true },
    paymentStatus: { type: String, enum: ['pending', 'completed', 'failed'], default: 'pending' },
    transactionId: { type: String },
    paymentDate: { type: Date },
}, { timestamps: true });

module.exports = mongoose.model('Payment', paymentSchema);
Review Model (Review.js)
javascript
Copy code
const mongoose = require('mongoose');

const reviewSchema = new mongoose.Schema({
    product: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
    user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    rating: { type: Number, min: 1, max: 5, required: true },
    comment: { type: String },
    images: [{ type: String }],
}, { timestamps: true });

module.exports = mongoose.model('Review', reviewSchema);
Coupon Model (Coupon.js)
javascript
Copy code
const mongoose = require('mongoose');

const couponSchema = new mongoose.Schema({
    code: { type: String, required: true, unique: true },
    discountPercentage: { type: Number, required: true },
    expirationDate: { type: Date, required: true },
    minimumPurchase: { type: Number, default: 0 },
    usageLimit: { type: Number, default: 1 },
    usedBy: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
}, { timestamps: true });

module.exports = mongoose.model('Coupon', couponSchema);
Shipping Model (Shipping.js)
javascript
Copy code
const mongoose = require('mongoose');

const shippingSchema = new mongoose.Schema({
    order: { type: mongoose.Schema.Types.ObjectId, ref: 'Order', required: true },
    shippingAddress: {
        street: { type: String, required: true },
        city: { type: String, required: true },
        state: { type: String, required: true },
        postalCode: { type: String, required: true },
        country: { type: String, required: true },
    },
    shippingMethod: { type: String, enum: ['standard', 'express', 'same_day'], default: 'standard' },
    shippingCost: { type: Number, default: 0 },
    trackingNumber: { type: String },
    shippingStatus: { type: String, enum: ['pending', 'shipped', 'delivered', 'cancelled'], default: 'pending' },
}, { timestamps: true });

module.exports = mongoose.model('Shipping', shippingSchema);
Inventory Model (Inventory.js)
javascript
Copy code
const mongoose = require('mongoose');

const inventorySchema = new mongoose.Schema({
    product: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
    vendor: { type: mongoose.Schema.Types.ObjectId, ref: 'Vendor' },
    stock: { type: Number, required: true },
    reorderLevel: { type: Number, default: 10 },
    lastRestocked: { type: Date },
}, { timestamps: true });

module.exports = mongoose.model('Inventory', inventorySchema);
These models cover everything needed for a robust e-commerce platform. Feel free to adjust or extend them according to your specific business requirements.







You said:
also give me one more model file. for sub vendors. linked with vendor. module

also i need the admin panel. to track every thing , and generate reports about every customer , employee , orders,  
i want to have the complete list, 
ChatGPT said:
ChatGPT
Here’s how you can model a SubVendor and integrate it with the Vendor schema, along with suggestions for an Admin Panel model that tracks and generates reports for customers, employees, orders, and other key e-commerce metrics.

SubVendor Model (SubVendor.js)
This model is linked with the Vendor model to represent sub-vendors under a main vendor. This might be useful if a vendor has multiple sales agents or branches.

javascript
Copy code
const mongoose = require('mongoose');

const subVendorSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    phone: { type: String },
    password: { type: String, required: true },
    vendor: { type: mongoose.Schema.Types.ObjectId, ref: 'Vendor', required: true },  // Linked with Vendor
    address: {
        street: { type: String },
        city: { type: String },
        state: { type: String },
        postalCode: { type: String },
        country: { type: String },
    },
    permissions: [{ type: String }], // e.g., 'manage-products', 'view-orders', etc.
    sales: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Order' }], // Linked orders handled by this sub-vendor
    accountStatus: { type: String, enum: ['active', 'inactive', 'suspended'], default: 'active' },
}, { timestamps: true });

module.exports = mongoose.model('SubVendor', subVendorSchema);
This model associates SubVendors with a Vendor and allows specific sub-vendors to handle orders, track sales, and manage permissions.

Admin Panel Tracking and Reports Model (Admin.js)
The admin model will allow tracking customers, employees, vendors, orders, and more. It will include reporting capabilities and detailed logs for full control.

javascript
Copy code
const mongoose = require('mongoose');

const adminSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    phone: { type: String },
    role: { type: String, enum: ['admin', 'super_admin'], default: 'admin' },
    permissions: [{ type: String }], // e.g., 'view-customers', 'generate-reports', 'manage-orders'
    logs: [{
        action: { type: String },  // e.g., 'Deleted customer', 'Updated product', 'Generated report'
        details: { type: String },
        createdAt: { type: Date, default: Date.now }
    }],
    reportsGenerated: [{
        reportType: { type: String, enum: ['customer', 'employee', 'vendor', 'order'], required: true },
        reportData: { type: Object },
        createdAt: { type: Date, default: Date.now }
    }],
}, { timestamps: true });

module.exports = mongoose.model('Admin', adminSchema);
Admin Panel Features:
1. Tracking Customers: The admin panel will have an interface to track every customer’s:

Total purchases
Total amount spent
Wishlist items
Cart items
Activity history (orders, reviews, and comments)
Account status (active/suspended)
2. Tracking Employees: Track all employees (vendors, sub-vendors, developers, etc.):

Employee name, email, role
Total orders handled
Permissions and tasks
Status (active, inactive, suspended)
3. Tracking Vendors and SubVendors:

Vendor/sub-vendor details and performance.
Total products listed.
Total sales.
Orders processed.
Average ratings and reviews.
4. Tracking Orders:

Order status (pending, shipped, delivered, cancelled).
Payment status (pending, completed, failed).
Tracking information.
Associated customer and vendor.
5. Generating Reports: Admins can generate detailed reports on:

Customers: Total customers, average purchases, most frequent customers, etc.
Employees: Total employees, tasks completed, sales handled, performance over time.
Orders: Total orders, sales trends, cancellations, payment failures.
Products: Best-selling products, least popular items, stock levels.
Vendors: Vendor performance, total products sold, average ratings.
6. Logs and Activity Tracking:

Every admin action (e.g., creating or deleting users, orders, products) will be logged with a timestamp.
Logs are viewable in the admin panel, and the super-admin can track all activities.
Example of Admin Generating a Report (Report.js)
javascript
Copy code
const mongoose = require('mongoose');

const reportSchema = new mongoose.Schema({
    admin: { type: mongoose.Schema.Types.ObjectId, ref: 'Admin', required: true },
    reportType: { type: String, enum: ['customer', 'employee', 'vendor', 'order'], required: true },
    data: { type: Object }, // The actual report data (e.g., total orders, sales metrics)
    createdAt: { type: Date, default: Date.now },
}, { timestamps: true });

module.exports = mongoose.model('Report', reportSchema);
How Admin Can Generate Reports:
For Customers:

javascript
Copy code
// Example function to generate customer report
const generateCustomerReport = async () => {
    const customers = await User.find({});
    const reportData = {
        totalCustomers: customers.length,
        topCustomers: customers.slice(0, 10), // Example: top 10 customers based on orders
        averagePurchases: calculateAveragePurchases(customers),
        frequentCustomers: getFrequentCustomers(customers),
    };
    return reportData;
};
For Orders:

javascript
Copy code
// Example function to generate order report
const generateOrderReport = async () => {
    const orders = await Order.find({});
    const reportData = {
        totalOrders: orders.length,
        totalRevenue: calculateTotalRevenue(orders),
        averageOrderValue: calculateAverageOrderValue(orders),
        cancelledOrders: orders.filter(order => order.orderStatus === 'cancelled'),
        ordersByVendor: groupOrdersByVendor(orders),
    };
    return reportData;
};
Admin Permissions and Super Admin Role:
Admins can be assigned specific permissions, like "view orders," "manage users," or "generate reports."
Super Admin has full access to all features, can create and delete other admins, and has visibility into all logs and activities.
This combination of models and functionality allows the admin panel to provide full control, tracking, and reporting on all aspects of the e-commerce system. The models are built to ensure that vendors, sub-vendors, customers, employees, orders, and more can be tracked and reported on, creating a powerful management tool for your application.

Let me know if you need further expansion or customization!






homepage requrirements. 

1. top header. - latest offers
2. main header. - logo. location finder, searchfield and user avatar. (without login)
3. category section. 
4. All products section. 
5. offers of the month. 
6. our brands
7. subscription section
8. Footer section.